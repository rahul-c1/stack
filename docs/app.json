[{"name":"app.r","content":"library(shiny)\nlibrary(shinyjs)\nlibrary(shinythemes)\n\n# Define available layers\nall_layers <- c(\n  \"TRL FLIP\" = \"trl_flip\",\n  \"TRL BREAKOUT\" = \"trl_breakout\",\n  \"SMA 20\" = \"sma20\",\n  \"SMA 50\" = \"sma50\",\n  \"FIB 50\" = \"fib50\",\n  \"FIB 61.8\" = \"fib618\",\n  \"DTL BREAKOUT\" = \"dtl_breakout\",\n  \"UTL BREAKOUT\" = \"utl_breakout\",\n  \"BSL HOLD\" = \"bsl_hold\",\n  \"2B\" = \"2b\",\n  \"INVERSE H&S\" = \"inverse_hs\",\n  \"BEAR FLAG FAILURE\" = \"bear_flag\",\n  \"GAP OVER\" = \"gap_over\",\n  \"HIGH VOLUME\" = \"high_volume\"\n)\n\n# Function to load data from CSV\nload_data <- function() {\n  if (file.exists(\"symbols_data.csv\")) {\n    tryCatch({\n      df <- read.csv(\"symbols_data.csv\", stringsAsFactors = FALSE)\n      symbols_list <- list()\n      \n      for (i in 1:nrow(df)) {\n        layers <- if (is.na(df$layers[i]) || df$layers[i] == \"\") {\n          character(0)\n        } else {\n          strsplit(df$layers[i], \";\")[[1]]\n        }\n        \n        symbols_list[[i]] <- list(\n          name = df$name[i],\n          layers = layers,\n          color = df$color[i]\n        )\n      }\n      \n      return(symbols_list)\n    }, error = function(e) {\n      # If there's an error reading the file, return default data\n      return(list(\n        list(name = \"TSLA\", layers = c(\"sma50\", \"trl_flip\", \"gap_over\", \"bsl_hold\", \"high_volume\"), color = \"green\"),\n        list(name = \"NVDA\", layers = c(\"sma20\", \"trl_breakout\"), color = \"blue\")\n      ))\n    })\n  } else {\n    # Return default data if file doesn't exist\n    return(list(\n      list(name = \"TSLA\", layers = c(\"sma50\", \"trl_flip\", \"gap_over\", \"bsl_hold\", \"high_volume\"), color = \"green\"),\n      list(name = \"NVDA\", layers = c(\"sma20\", \"trl_breakout\"), color = \"blue\")\n    ))\n  }\n}\n\n# Function to save data to CSV\nsave_data <- function(symbols_list) {\n  if (length(symbols_list) > 0) {\n    df <- data.frame(\n      name = sapply(symbols_list, function(x) x$name),\n      layers = sapply(symbols_list, function(x) paste(x$layers, collapse = \";\")),\n      color = sapply(symbols_list, function(x) x$color),\n      stringsAsFactors = FALSE\n    )\n    \n    write.csv(df, \"symbols_data.csv\", row.names = FALSE)\n  }\n}\n\n# UI\nui <- fluidPage(\n  theme = shinytheme(\"cyborg\"),\n  useShinyjs(),\n  tags$head(\n    tags$style(HTML(\"\n      .symbol-list {\n        background-color: #2a2a2a;\n        border-radius: 5px;\n        padding: 10px;\n        margin: 10px;\n      }\n      .symbol-item {\n        margin: 5px;\n        padding: 8px;\n        border-radius: 3px;\n        color: white;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        cursor: pointer;\n      }\n      .green-symbol {\n        background-color: #28a745;\n      }\n      .blue-symbol {\n        background-color: #007bff;\n      }\n      .badge {\n        background-color: rgba(255,255,255,0.2);\n        padding: 3px 7px;\n        border-radius: 10px;\n        font-size: 0.9em;\n      }\n    \"))\n  ),\n  \n  fluidRow(\n    column(4,\n           div(class = \"symbol-list\",\n               h4(\"Tracked Symbols\"),\n               textInput(\"newSymbol\", \"Add Symbol\", \"\"),\n               checkboxGroupInput(\"layers\", \"Select Layers\", choices = all_layers),\n               actionButton(\"addSymbol\", \"Add\"),\n               hr(),\n               uiOutput(\"symbolsList\")\n           )\n    ),\n    column(4,\n           div(class = \"controls\",\n               h4(\"Controls\"),\n               actionButton(\"sortSymbol\", \"Sort by Symbol\"),\n               actionButton(\"sortColor\", \"Sort by Color\"),\n               hr(),\n               actionButton(\"extend\", \"Extend List\"),\n               actionButton(\"reduce\", \"Reduce List\"),\n               hr(),\n               actionButton(\"saveData\", \"Save Data\", class = \"btn-success\"),\n               tags$br(), tags$br(),\n               downloadButton(\"downloadData\", \"Download CSV\", class = \"btn-info\"),\n               tags$br(), tags$br(),\n               p(\"Data is automatically saved to symbols_data.csv\")\n           )\n    )\n  )\n)\n\n# Server\nserver <- function(input, output, session) {\n  # Load data on startup\n  symbols <- reactiveVal(load_data())\n  \n  # Currently selected symbol for editing\n  selectedSymbol <- reactiveVal(NULL)\n  \n  # Render the symbols list\n  output$symbolsList <- renderUI({\n    lapply(seq_along(symbols()), function(i) {\n      symbol <- symbols()[[i]]\n      layer_count <- length(symbol$layers)\n      layer_names <- if (layer_count > 0) paste(symbol$layers, collapse = \", \") else \"None\"\n      \n      div(class = paste(\"symbol-item\", ifelse(layer_count >= 4, \"green-symbol\", \"blue-symbol\")),\n          id = paste0(\"symbol_\", i),\n          div(\n            strong(symbol$name), tags$br(),\n            span(class = \"badge\", paste(layer_count, \"layers\")), tags$br(),\n            tags$small(layer_names)\n          )\n      )\n    })\n  })\n  \n  # Attach observers to dynamic symbol elements\n  observe({\n    lapply(seq_along(symbols()), function(i) {\n      id <- paste0(\"symbol_\", i)\n      onclick(id, {\n        selectedSymbol(i)  # set index\n        showModal(modalDialog(\n          title = paste(\"Edit Layers -\", symbols()[[i]]$name),\n          checkboxGroupInput(\"editLayers\", \"Layers\", choices = all_layers,\n                             selected = symbols()[[i]]$layers),\n          footer = tagList(\n            modalButton(\"Cancel\"),\n            actionButton(\"saveLayers\", \"Save\")\n          ),\n          easyClose = TRUE\n        ))\n      })\n    })\n  })\n  \n  # Save updated layers\n  observeEvent(input$saveLayers, {\n    i <- selectedSymbol()\n    if (!is.null(i)) {\n      current <- symbols()\n      updated_layers <- input$editLayers\n      current[[i]]$layers <- updated_layers\n      current[[i]]$color <- ifelse(length(updated_layers) >= 4, \"green\", \"blue\")\n      symbols(current)\n    }\n    removeModal()\n  })\n  \n  # Add new symbol\n  observeEvent(input$addSymbol, {\n    new_symbol <- trimws(input$newSymbol)\n    selected_layers <- input$layers\n    if (new_symbol != \"\") {\n      current <- symbols()\n      if (!any(sapply(current, function(x) toupper(x$name) == toupper(new_symbol)))) {\n        current[[length(current) + 1]] <- list(\n          name = toupper(new_symbol),\n          layers = selected_layers,\n          color = ifelse(length(selected_layers) >= 4, \"green\", \"blue\")\n        )\n        symbols(current)\n      }\n      updateTextInput(session, \"newSymbol\", value = \"\")\n      updateCheckboxGroupInput(session, \"layers\", selected = character(0))\n    }\n  })\n  \n  # Sorting\n  observeEvent(input$sortSymbol, {\n    current <- symbols()\n    sorted <- current[order(sapply(current, function(x) x$name))]\n    symbols(sorted)\n  })\n  \n  observeEvent(input$sortColor, {\n    current <- symbols()\n    sorted <- current[order(sapply(current, function(x) length(x$layers)), decreasing = TRUE)]\n    symbols(sorted)\n  })\n  \n  # Extend/reduce list\n  observeEvent(input$extend, {\n    current <- symbols()\n    for (i in 1:5) {\n      current[[length(current) + 1]] <- list(\n        name = paste0(\"NEW\", length(current) + 1),\n        layers = character(0),\n        color = \"blue\"\n      )\n    }\n    symbols(current)\n  })\n  \n  observeEvent(input$reduce, {\n    current <- symbols()\n    if (length(current) > 5) {\n      symbols(current[1:(length(current)-5)])\n    } else {\n      symbols(list())\n    }\n  })\n  \n  # Save data to CSV\n  observeEvent(input$saveData, {\n    save_data(symbols())\n    showNotification(\"Data saved successfully!\", type = \"message\")\n  })\n  \n  # Download handler for CSV\n  output$downloadData <- downloadHandler(\n    filename = function() {\n      paste(\"symbols_data_\", Sys.Date(), \".csv\", sep = \"\")\n    },\n    content = function(file) {\n      if (length(symbols()) > 0) {\n        df <- data.frame(\n          name = sapply(symbols(), function(x) x$name),\n          layers = sapply(symbols(), function(x) paste(x$layers, collapse = \";\")),\n          color = sapply(symbols(), function(x) x$color),\n          stringsAsFactors = FALSE\n        )\n        write.csv(df, file, row.names = FALSE)\n      }\n    },\n    contentType = \"text/csv\"\n  )\n  \n  # Auto-save when data changes\n  observeEvent(symbols(), {\n    save_data(symbols())\n  }, ignoreInit = TRUE)\n}\n\nshinyApp(ui, server)","type":"text"},{"name":"symbols_data.csv","content":"\"name\",\"layers\",\"color\"\n\"TSLA\",\"sma50;trl_flip;gap_over;bsl_hold;high_volume\",\"green\"\n\"NVDA\",\"sma20;trl_breakout\",\"blue\"\n\"OKLO\",\"gap_over;high_volume\",\"blue\"\n\"ETNB\",\"gap_over;high_volume\",\"blue\"\n\"GEV\",\"sma20;dtl_breakout;gap_over;high_volume\",\"green\"\n","type":"text"}]
